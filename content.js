const selectors = [
    { hosts: ["rimi.lv", "www.rimi.lv"], pathStart: "/e-veikals", selector: ".card__name" },
    { hosts: ["rimi.ee", "www.rimi.ee"], pathStart: "/epood", selector: ".card__name" },
    { hosts: ["barbora.lv", "barbora.lt", "www.barbora.lv", "www.barbora.lt"], pathStart: "", selector: ".tw-block" }
    // { hosts: ["ventspils.citro.lv", "rezekne.citro.lv", "www.ventspils.citro.lv", "www.rezekne.citro.lv"], pathStart: "", selector: ".woocommerce-loop-product__title" },
];

const currentHost = window.location.hostname;
const currentPath = window.location.pathname;

let siteSelector = null;

console.log("üí° content.js –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞", window.location.href);

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∞–π—Ç–∞
for (const site of selectors) {
    if (site.hosts.includes(currentHost)) {
        if (!site.pathStart || currentPath.startsWith(site.pathStart)) {
            siteSelector = site.selector;
            break;
        }
    }
}

if (siteSelector) {
    console.log("üîç –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º:", siteSelector);
    startScraping(siteSelector);
} else {
    console.log("‚ö†Ô∏è –í –º–æ–µ–º —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞.");
}

function startScraping(selector) {
    const seen = new Set();

    const handleNewElement = (element) => {
        if (!seen.has(element)) {
            seen.add(element);
            const name = element.textContent.trim();
            console.log("üÜï –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä:", name);
        }
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–±–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const initialCheck = () => {
        const elements = document.querySelectorAll(selector);
        elements.forEach(handleNewElement);
    };

    initialCheck();

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    const observer = new MutationObserver(() => {
        const elements = document.querySelectorAll(selector);
        elements.forEach(handleNewElement);
    });

    observer.observe(document.body, { childList: true, subtree: true });

    console.log("üëÄ –°–ª–µ–∂–∫–∞ –∑–∞ DOM –∑–∞–ø—É—â–µ–Ω–∞. –í—Å–µ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏.");
}

// ============================
// üß≠ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ SPA-–Ω–∞–≤–∏–≥–∞—Ü–∏–∏
// ============================

function onUrlChange(callback) {
    const pushState = history.pushState;
    const replaceState = history.replaceState;

    history.pushState = function (...args) {
        pushState.apply(this, args);
        window.dispatchEvent(new Event("urlchange"));
    };
    history.replaceState = function (...args) {
        replaceState.apply(this, args);
        window.dispatchEvent(new Event("urlchange"));
    };

    window.addEventListener("popstate", callback);
    window.addEventListener("urlchange", callback);
}

onUrlChange(() => {
    console.log("üîÑ URL –∏–∑–º–µ–Ω–∏–ª—Å—è:", window.location.href);

    // –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –ø—Ä–∏ —Å–º–µ–Ω–µ URL
    const newPath = window.location.pathname;
    let newSelector = null;

    for (const site of selectors) {
        if (site.hosts.includes(currentHost)) {
            if (!site.pathStart || newPath.startsWith(site.pathStart)) {
                newSelector = site.selector;
                break;
            }
        }
    }

    if (newSelector) {
        console.log("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞:", newSelector);
        startScraping(newSelector);
    } else {
        console.log("‚ö†Ô∏è –°–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã URL.");
    }
});
